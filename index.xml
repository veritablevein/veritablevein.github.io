<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>我的第一个Hugo网页</title><link>https://veritablevein.github.io/</link><description>Recent content on 我的第一个Hugo网页</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 23 Mar 2022 17:07:14 +0800</lastBuildDate><atom:link href="https://veritablevein.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>01-Vue的介绍和vue-cli</title><link>https://veritablevein.github.io/posts/01-vue%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8Cvue-cli/</link><pubDate>Wed, 23 Mar 2022 17:07:14 +0800</pubDate><guid>https://veritablevein.github.io/posts/01-vue%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8Cvue-cli/</guid><description>MVVM模式 Model：负责数据存储
View：负责页面展示
View Model：负责业务逻辑处理（比如Ajax请求等），对数据进行加工后交给视图展示
关于框架 为什么要学习流行框架 1、企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；企业中，使用框架，能够提高开发的效率。
提高开发效率的发展历程：
原生JS -&amp;gt; Jquery之类的类库 -&amp;gt; 前端模板引擎 -&amp;gt; Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念）
2、在Vue中，一个核心的概念就是：数据驱动，避免手动操作DOM元素。这样的话，可以让前端程序员可以更多的时间去关注数据的业务逻辑，而不是关心 DOM 是如何渲染的了。
框架和库的区别 框架：
框架是一套完整的解决方案。
对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。但是优点也很明显：功能完善、提供了一整套的解决方案。
库（插件）：
只是提供某一个小功能。
对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。
举例：
从Jquery 切换到 Zepto
从 EJS 切换到 art-template
前端的各种框架 Vue 和 React 的相同点 利用虚拟DOM实现快速渲染
轻量级
响应式组件
支持服务器端渲染
易于集成路由工具、打包工具以及状态管理工具</description></item></channel></rss>